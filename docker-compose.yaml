services:
  # =============================================================================
  # PostgreSQL Database - ConfiguraÃ§Ã£o otimizada para produÃ§Ã£o
  # =============================================================================
  postgresql:
    image: postgres:17-alpine
    container_name: postgres_container
    
    # ðŸ”’ PRESERVADO: Volume existente para manter dados
    volumes:
      - db:/var/lib/postgresql/data
      - ./postgres-logs:/var/log/postgresql
    
    ports:
      - "5432:5432"
    
    # ðŸ”’ PRESERVADO: ConfiguraÃ§Ãµes de ambiente existentes
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=adminpassword
      - POSTGRES_DB=controle_pedidos
      # âš¡ CORRIGIDO: Manter configuraÃ§Ãµes existentes para evitar warnings
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8 --data-checksums
      - POSTGRES_HOST_AUTH_METHOD=md5
      # âš¡ NOVO: ConfiguraÃ§Ãµes de locale consistentes
      - LC_ALL=en_US.utf8
      - LANG=en_US.utf8
    
    # ðŸ”’ PRESERVADO: Rede existente
    networks:
      - controle_pedidos_network
    
    # âš¡ OTIMIZADO: Resource limits para Coolify (2 vCPUs / 4GB RAM)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # âš¡ OTIMIZADO: Health check menos agressivo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d controle_pedidos -h localhost"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # âš¡ OTIMIZADO: Restart policy
    restart: unless-stopped
    
    # ðŸ”’ Security context
    security_opt:
      - no-new-privileges:true
    
    # ðŸ“Š Logging estruturado
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=postgresql"

  # =============================================================================
  # API Application - ConfiguraÃ§Ã£o otimizada para Node.js
  # =============================================================================
  api-um-doce:
    build:
      context: .
      dockerfile: Dockerfile
      # Cache otimizado
      cache_from:
        - node:22.15-alpine3.20
    
    container_name: api_um_doce_container
    
    # ðŸ”— DependÃªncia com health check
    depends_on:
      postgresql:
        condition: service_healthy
    
    ports:
      - "3333:3333"
    
    # ðŸ”’ PRESERVADO: Todas as variÃ¡veis de ambiente existentes
    environment:
      - PORT=3333
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=adminpassword
      - DB_NAME=controle_pedidos
      - DATABASE_URL=postgresql://admin:adminpassword@postgresql:5432/controle_pedidos
      - NODE_ENV=production
      # âš¡ NOVO: OtimizaÃ§Ãµes Node.js
      - NODE_OPTIONS=--max-old-space-size=2048 --enable-source-maps
      - TZ=America/Sao_Paulo
      - NPM_CONFIG_LOGLEVEL=warn
      # âš¡ NOVO: ConfiguraÃ§Ãµes para timeout em produÃ§Ã£o
      - HTTP_TIMEOUT=30000
      - KEEP_ALIVE_TIMEOUT=65000
    
    # ðŸ”’ PRESERVADO: Rede existente
    networks:
      - controle_pedidos_network
    
    # âš¡ OTIMIZADO: Resource limits para aplicaÃ§Ã£o Node.js
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # âš¡ OTIMIZADO: Health check menos frequente para produÃ§Ã£o
    # âš¡ OTIMIZADO: Health check mais robusto para Coolify
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3333/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    # âš¡ OTIMIZADO: Restart policy com delay
    restart: unless-stopped
    
    # ðŸ”’ Security context
    security_opt:
      - no-new-privileges:true
    read_only: false
    
    # ðŸ“Š Logging estruturado
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=api-um-doce"
    
    # ðŸš€ Labels para Coolify/Traefik - SIMPLIFICADO
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.api-um-doce.loadbalancer.server.port=3333"
      - "traefik.http.routers.api-um-doce.rule=Host(`api.umdoce.dev.br`)"
      - "traefik.http.routers.api-um-doce.tls=true"
      - "traefik.http.routers.api-um-doce.tls.certresolver=letsencrypt"
      # Coolify specific labels
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=api-um-doce"
      # Timeout configurations
      - "traefik.http.services.api-um-doce.loadbalancer.server.scheme=http"
      - "traefik.http.services.api-um-doce.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.api-um-doce.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.api-um-doce.loadbalancer.healthcheck.timeout=10s"

# =============================================================================
# Network Configuration - PRESERVADA configuraÃ§Ã£o existente
# =============================================================================
networks:
  controle_pedidos_network:
    name: controle_pedidos_network
    driver: bridge

# =============================================================================
# Volumes Configuration - PRESERVADO volume existente
# =============================================================================
volumes:
  # ðŸ”’ PRESERVADO: Volume principal do banco de dados
  db:
    driver: local
  
  # âš¡ NOVO: Volume para logs do PostgreSQL
  postgres-logs:
    driver: local